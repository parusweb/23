<?php
/**
 * –ú–æ–¥—É–ª—å: JavaScript –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
 * –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—â–∏–π JavaScript –∫–æ–¥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
 * –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: category-helpers, product-calculations, pm-paint-schemes
 * 
 * –≠–¢–û–¢ –ú–û–î–£–õ–¨ –°–û–î–ï–†–ñ–ò–¢ –í–ï–°–¨ JAVASCRIPT –ö–û–î –î–õ–Ø –í–°–ï–• –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–û–í
 */

if (!defined('ABSPATH')) {
    exit;
}

/**
 * –í—ã–≤–æ–¥ JavaScript –∫–æ–¥–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
 */
add_action('wp_footer', 'parusweb_calculator_javascript', 100);
function parusweb_calculator_javascript() {
    if (!is_product()) {
        return;
    }
    
    global $product;
    if (!$product) {
        return;
    }
    
    $product_id = $product->get_id();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    if (!function_exists('get_calculator_type')) {
        return;
    }
    
    $calc_type = get_calculator_type($product_id);
    
    if ($calc_type === 'none') {
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JavaScript
    $base_price = floatval($product->get_price());
    $painting_services = function_exists('get_available_painting_services_by_material') 
        ? get_available_painting_services_by_material($product_id) 
        : array();
    
    ?>
    <script type="text/javascript">
    jQuery(document).ready(function($) {
        'use strict';
        
        console.log('üöÄ ParusWeb Calculator JavaScript loaded');
        
        // ========================================
        // –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò
        // ========================================
        
        /**
         * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
         */
        function formatPrice(price) {
            return Math.round(price).toLocaleString('ru-RU') + ' ‚ÇΩ';
        }
        
        /**
         * –§—É–Ω–∫—Ü–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è (1 —à—Ç—É–∫–∞, 2 —à—Ç—É–∫–∏, 5 —à—Ç—É–∫)
         */
        function getRussianPlural(number, forms) {
            // forms = ['—à—Ç—É–∫–∞', '—à—Ç—É–∫–∏', '—à—Ç—É–∫']
            const cases = [2, 0, 1, 1, 1, 2];
            const n = Math.abs(number) % 100;
            const n1 = n % 10;
            
            if (n > 10 && n < 20) {
                return forms[2];
            }
            if (n1 > 1 && n1 < 5) {
                return forms[1];
            }
            if (n1 === 1) {
                return forms[0];
            }
            return forms[2];
        }
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è
         */
        function createHiddenField(name, value) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            $('input[name="' + name + '"]').remove();
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            const input = $('<input>').attr({
                type: 'hidden',
                name: name,
                value: value
            });
            
            $('.single_add_to_cart_button').closest('form').append(input);
        }
        
        /**
         * –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
         */
        function removeHiddenFields(prefix) {
            $('input[name^="' + prefix + '"]').remove();
        }
        
        // ========================================
        // –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ü–õ–û–©–ê–î–ò
        // ========================================
        
        const areaPacks = $('#area_packs');
        const areaResult = $('#area_calc_result');
        
        if (areaPacks.length) {
            console.log('‚úì Area Calculator found');
            
            function updateAreaCalculator() {
                const packs = parseInt(areaPacks.val()) || 1;
                const packArea = parseFloat($('#area_pack_area').val()) || 0;
                const basePrice = parseFloat($('#area_base_price').val()) || 0;
                const isLeaf = $('#area_is_leaf').val() === '1';
                
                if (packs < 1 || packArea <= 0 || basePrice <= 0) {
                    return;
                }
                
                const totalArea = packs * packArea;
                const totalPrice = totalArea * basePrice;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—Ä–∞—Å–∫–∏
                let grandTotal = totalPrice;
                const paintingSelect = $('#painting_service_select');
                if (paintingSelect.length && paintingSelect.val()) {
                    const paintingPrice = parseFloat(paintingSelect.find('option:selected').data('price')) || 0;
                    if (paintingPrice > 0) {
                        grandTotal += totalArea * paintingPrice;
                    }
                }
                
                // –°–∫–ª–æ–Ω–µ–Ω–∏–µ
                const unitForms = isLeaf ? ['–ª–∏—Å—Ç', '–ª–∏—Å—Ç–∞', '–ª–∏—Å—Ç–æ–≤'] : ['—É–ø–∞–∫–æ–≤–∫–∞', '—É–ø–∞–∫–æ–≤–∫–∏', '—É–ø–∞–∫–æ–≤–æ–∫'];
                const plural = getRussianPlural(packs, unitForms);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                $('#area_total_area').text(totalArea.toFixed(2).replace('.', ',') + ' –º¬≤');
                $('#area_total_price').text(formatPrice(grandTotal));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
                createHiddenField('custom_area_packs', packs);
                createHiddenField('custom_area_area_value', totalArea.toFixed(2));
                createHiddenField('custom_area_total_price', totalPrice.toFixed(2));
                createHiddenField('custom_area_grand_total', grandTotal.toFixed(2));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ WooCommerce
                $('input.qty').val(packs).prop('readonly', true);
            }
            
            areaPacks.on('input change', updateAreaCalculator);
            $(document).on('change', '#painting_service_select', updateAreaCalculator);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            updateAreaCalculator();
        }
        
        // ========================================
        // –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ö–í–ê–î–†–ê–¢–ù–´–• –ú–ï–¢–†–û–í
        // ========================================
        
        const sqWidth = $('#sq_width');
        const sqLength = $('#sq_length');
        const sqResult = $('#sq_calc_result');
        
        if (sqWidth.length && sqLength.length) {
            console.log('‚úì Square Meter Calculator found');
            
            function updateSquareMeterCalculator() {
                const width = parseFloat(sqWidth.val()) || 0;
                const length = parseFloat(sqLength.val()) || 0;
                const basePrice = parseFloat($('#sq_base_price').val()) || 0;
                const packArea = parseFloat($('#sq_pack_area').val()) || 0;
                
                if (width <= 0 || length <= 0 || basePrice <= 0) {
                    sqResult.hide();
                    return;
                }
                
                const area = width * length;
                let packs = 1;
                let totalPrice = area * basePrice;
                
                if (packArea > 0) {
                    packs = Math.ceil(area / packArea);
                    totalPrice = packs * packArea * basePrice;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—Ä–∞—Å–∫—É
                let grandTotal = totalPrice;
                const paintingSelect = $('#painting_service_select');
                if (paintingSelect.length && paintingSelect.val()) {
                    const paintingPrice = parseFloat(paintingSelect.find('option:selected').data('price')) || 0;
                    if (paintingPrice > 0) {
                        grandTotal += area * paintingPrice;
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                $('#sq_total_area').text(area.toFixed(2).replace('.', ','));
                if (packArea > 0) {
                    const unitForms = ['—É–ø–∞–∫–æ–≤–∫–∞', '—É–ø–∞–∫–æ–≤–∫–∏', '—É–ø–∞–∫–æ–≤–æ–∫'];
                    $('#sq_packs_needed').text(packs + ' ' + getRussianPlural(packs, unitForms));
                }
                $('#sq_total_price').text(formatPrice(grandTotal));
                
                // –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
                createHiddenField('custom_sq_width', width);
                createHiddenField('custom_sq_length', length);
                createHiddenField('custom_sq_total_price', grandTotal.toFixed(2));
                createHiddenField('custom_sq_quantity', packs);
                createHiddenField('custom_sq_total_area', area.toFixed(3));
                
                sqResult.show();
                $('input.qty').val(packs).prop('readonly', true);
            }
            
            sqWidth.on('input change', updateSquareMeterCalculator);
            sqLength.on('input change', updateSquareMeterCalculator);
            $(document).on('change', '#painting_service_select', updateSquareMeterCalculator);
        }
        
        // ========================================
        // –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ü–û–ì–û–ù–ù–´–• –ú–ï–¢–†–û–í
        // ========================================
        
        const rmLength = $('#rm_length');
        const rmResult = $('#rm_calc_result');
        
        if (rmLength.length) {
            console.log('‚úì Running Meter Calculator found');
            
            function updateRunningMeterCalculator() {
                const length = parseFloat(rmLength.val()) || 0;
                const basePrice = parseFloat($('#rm_base_price').val()) || 0;
                const width = parseFloat($('#rm_width').val()) || 0;
                
                if (length <= 0 || basePrice <= 0) {
                    rmResult.hide();
                    return;
                }
                
                let totalPrice = length * basePrice;
                
                // –ü–ª–æ—â–∞–¥—å –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —à–∏—Ä–∏–Ω–∞)
                const paintArea = width > 0 ? (width / 1000) * length : length;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—Ä–∞—Å–∫—É
                let grandTotal = totalPrice;
                const paintingSelect = $('#painting_service_select');
                if (paintingSelect.length && paintingSelect.val()) {
                    const paintingPrice = parseFloat(paintingSelect.find('option:selected').data('price')) || 0;
                    if (paintingPrice > 0) {
                        grandTotal += paintArea * paintingPrice;
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                $('#rm_total_length').text(length.toFixed(1).replace('.', ','));
                $('#rm_total_price').text(formatPrice(grandTotal));
                
                // –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
                createHiddenField('custom_rm_length', length);
                createHiddenField('custom_rm_width', width);
                createHiddenField('custom_rm_price', totalPrice.toFixed(2));
                createHiddenField('custom_rm_grand_total', grandTotal.toFixed(2));
                createHiddenField('custom_rm_painting_area', paintArea.toFixed(3));
                
                rmResult.show();
                $('input.qty').val(1).prop('readonly', true);
            }
            
            rmLength.on('input change', updateRunningMeterCalculator);
            $(document).on('change', '#painting_service_select', updateRunningMeterCalculator);
        }
        
        // ========================================
        // –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –†–ê–ó–ú–ï–†–û–í
        // ========================================
        
        const dimWidth = $('#dim_width');
        const dimLength = $('#dim_length');
        const dimResult = $('#dim_calc_result');
        
        if (dimWidth.length && dimLength.length) {
            console.log('‚úì Dimensions Calculator found');
            
            function updateDimensionsCalculator() {
                const width = parseInt(dimWidth.val()) || 0;
                const length = parseFloat(dimLength.val()) || 0;
                const basePrice = parseFloat($('#dim_base_price').val()) || 0;
                const multiplier = parseFloat($('#dim_multiplier').val()) || 1;
                
                if (width <= 0 || length <= 0 || basePrice <= 0) {
                    dimResult.hide();
                    return;
                }
                
                const area = (width / 1000) * length;
                let totalPrice = area * basePrice * multiplier;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—Ä–∞—Å–∫—É
                let grandTotal = totalPrice;
                const paintingSelect = $('#painting_service_select');
                if (paintingSelect.length && paintingSelect.val()) {
                    const paintingPrice = parseFloat(paintingSelect.find('option:selected').data('price')) || 0;
                    if (paintingPrice > 0) {
                        grandTotal += area * paintingPrice;
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                $('#dim_width_display').text(width + ' –º–º');
                $('#dim_length_display').text(length.toFixed(2).replace('.', ',') + ' –º');
                $('#dim_total_area').text(area.toFixed(3).replace('.', ','));
                $('#dim_total_price').text(formatPrice(grandTotal));
                
                // –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
                createHiddenField('custom_width_val', width);
                createHiddenField('custom_length_val', length);
                createHiddenField('custom_dim_price', totalPrice.toFixed(2));
                createHiddenField('custom_dim_grand_total', grandTotal.toFixed(2));
                createHiddenField('custom_dim_area', area.toFixed(3));
                
                dimResult.show();
                $('input.qty').val(1).prop('readonly', true);
            }
            
            dimWidth.on('change', updateDimensionsCalculator);
            dimLength.on('change', updateDimensionsCalculator);
            $(document).on('change', '#painting_service_select', updateDimensionsCalculator);
        }
        
        // ========================================
        // –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –§–ê–õ–¨–®–ë–ê–õ–û–ö
        // ========================================
        
        const fbShape = $('#fb_shape');
        const fbLength = $('#fb_length');
        const fbResult = $('#fb_calc_result');
        
        if (fbShape.length && fbLength.length) {
            console.log('‚úì Falsebalk Calculator found');
            
            function updateFalsebalkCalculator() {
                const shape = fbShape.val();
                const length = parseFloat(fbLength.val()) || 0;
                const basePrice = parseFloat($('#fb_base_price').val()) || 0;
                
                if (!shape || length <= 0 || basePrice <= 0) {
                    fbResult.hide();
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
                const shapeData = window.falsebalkShapesData ? window.falsebalkShapesData[shape] : null;
                
                if (!shapeData) {
                    return;
                }
                
                const area = (shapeData.perimeter / 1000) * length;
                let totalPrice = area * basePrice;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—Ä–∞—Å–∫—É
                let grandTotal = totalPrice;
                const paintingSelect = $('#painting_service_select');
                if (paintingSelect.length && paintingSelect.val()) {
                    const paintingPrice = parseFloat(paintingSelect.find('option:selected').data('price')) || 0;
                    if (paintingPrice > 0) {
                        grandTotal += area * paintingPrice;
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                $('#fb_shape_display').text(shapeData.label);
                $('#fb_length_display').text(length.toFixed(1).replace('.', ','));
                $('#fb_total_area').text(area.toFixed(3).replace('.', ','));
                $('#fb_total_price').text(formatPrice(grandTotal));
                
                // –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
                createHiddenField('custom_fb_shape', shape);
                createHiddenField('custom_fb_length', length);
                createHiddenField('custom_fb_area', area.toFixed(3));
                createHiddenField('custom_fb_price', totalPrice.toFixed(2));
                createHiddenField('custom_fb_grand_total', grandTotal.toFixed(2));
                
                fbResult.show();
                $('input.qty').val(1).prop('readonly', true);
            }
            
            fbShape.on('change', updateFalsebalkCalculator);
            fbLength.on('input change', updateFalsebalkCalculator);
            $(document).on('change', '#painting_service_select', updateFalsebalkCalculator);
        }
        
        // ========================================
        // –£–°–õ–£–ì–ò –ü–û–ö–†–ê–°–ö–ò
        // ========================================
        
        const paintingSelect = $('#painting_service_select');
        const paintingColors = $('#painting_colors');
        
        if (paintingSelect.length) {
            console.log('‚úì Painting services found');
            
            paintingSelect.on('change', function() {
                const serviceKey = $(this).val();
                
                if (!serviceKey) {
                    paintingColors.hide();
                    return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
                $('.paint-colors').hide();
                $('#colors_' + serviceKey).show();
                paintingColors.show();
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                // (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤—ã—à–µ)
            });
        }
        
        console.log('‚úÖ ParusWeb Calculator JavaScript initialized');
    });
    </script>
    <?php
}
